// Xinghan Guo
// A GrammarSolver class manipulates the grammar and enables user to 
// randomly generate elements of the grammar. 

import java.util.*;

public class GrammarSolver {
    private Map<String, String[]> grammarList; // elements conneced with each nonterminal symbol
    
    // pre: grammar is not empty, and there is only one entry for the same nonterminal symbol
    //      (throw IllegalArgumentException if not)
    // post: maps and stores each nonternminal symbol given by grammar 
    //       with the corresponding elements
    public GrammarSolver(List<String> grammar) {
        if (grammar.isEmpty()) {
            throw new IllegalArgumentException();
        }
        
        grammarList = new TreeMap<String, String[]>();
        
        for (int i = 0; i < grammar.size(); i++) {
            String[] parts = grammar.get(i).split("::=");
            if (grammarList.containsKey(parts[0])) {
                throw new IllegalArgumentException();
            }
            grammarList.put(parts[0], parts[1].split("[|]"));
        }
    }
    
    // post: return true if the given symbol is nonterminal of grammar, false otherwise 
    public boolean grammarContains(String symbol) {
        return grammarList.containsKey(symbol);
    }
    
    // pre: grammarList contains the given nonterminal symbol and times >= 0
    //      (throw IllegalArgumentException if not)
    // post: returns a list of result (each seperated by whitespace and without leading and 
    //       trailing space) randomly generated by grammar with given nonterminal symbol 
    //       in given times
    public String[] generate(String symbol, int times) {
        if (!grammarList.containsKey(symbol) || times < 0) {
            throw new IllegalArgumentException();
        }
        
        String[] result = new String[times];
        for (int i = 0; i < times; i++) {
            result[i] = produceOneString(symbol).trim();
        }
        return result;
    }
    
    // post: return all nonterminal symbols from grammar 
    public String getSymbols() {
        return grammarList.keySet().toString();
    }
    
    // post: produce the result at one time randomly generated by grammar with the given terminal
    //       terminal symbol. For the rules of given symbol, randomly picks one as result if it is
    //       terminal symbols, generates continuously otherwise until finding terminal symbol
    //       (also cut the tabs, spaces, leading and trailing space for one terminal symbol).
    private String produceOneString(String symbol) {
        String[] rule = grammarList.get(symbol);
        int rand = (int) (Math.random() * rule.length);
        String[] content = rule[rand].trim().split("[ \t]+");
        
        String oneString = "";
        for (String str: content) {
            if (!grammarList.containsKey(str)) {
                oneString += str + " ";
            } else {
                oneString += produceOneString(str);
            }
        }
        return oneString;
    }
}
